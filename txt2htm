#! /usr/bin/perl
#
# This is a Perl script used to convert the Icarus Wing source to HTML

my $speaker;
my $counter = 0;
my $in_quoted_block = 0;
my $line_number = 0;

sub addtextcolor {
    ($name, $color) = @_;

    $color =~ s/0[0-9.]*/sprintf("%02x", 255*$&)/eg;
    $color =~ s/,//g;
    $color =~ s/^/#/g;
    $textcolor{$name} = $color;
    #print $name, $color, "\n";
}

&addtextcolor("Bible", "0.7,0,0");

&addtextcolor("Mercuriou", "0.4,0.2,0");
&addtextcolor("Burns", "0.3,0.3,0");
&addtextcolor("Vic", "0.4,0,0.4");
&addtextcolor("Alister", "0,0.4,0");
&addtextcolor("Andrea", "0,0,0.4");

&addtextcolor("Kyle", "0,0,0");
&addtextcolor("David", "0,0,0");

&addtextcolor("Ecks", "0.5,0,0.5");
&addtextcolor("Wye", "0.7,0.7,0");
&addtextcolor("Zee", "0,0.5,0.5");

&addtextcolor("Janders", "0,0.5,0.5");
&addtextcolor("McGee", "0.7,0.7,0");
&addtextcolor("alNass", "0.5,0,0.5");
&addtextcolor("Radio", "0,0,0");

sub insertTOC {

    print q|
<spacer/>
<center><h3>
Requirements for
The Great anti-American Novel
</h3></center>
|;

    open(ICARUSWING, "<IcarusWing");
    while (<ICARUSWING>) {
	if (/^(T [+-] [0-9]+)/ || /^(Launch Day)/ || /^(Epilog)/) {
	    print "<a href='#$1'>";
	    s/^.*    //;
	    unless (/^T / or /^Launch Day/) {
		print;
		print "<br/>\n";
	    }
	    print "</a>\n";
	}
    }
    close(ICARUSWING);

    print "<spacer/>\n";
}

sub ProcessLine {

    next if m|^%|;

    s/\$/\\\$/;				# quote $

    s/\\~n/\xc3\xb1/g;
    s/\\"o/\xc3\xb6/g;
    s/\\=a/\xc4\x81/g;
    s/\\'e/é/g;
    s/\\\$/\$/g;
    s/--/–/g;

    s/Cpacebo/спасибо/g;
    s/Do cbidaniy/до свидания/g;

    s/Christian1/Christian\$^1\$/;	# add superscripts to "Christian"
    s/Christians1/Christians\$^1\$/;
    s/Christian2/Christian\$^2\$/;
    s/Christians2/Christians\$^2\$/;

    s/^al-Nass:/alNass:/;		# handle the hyphen like this

    # The speaking character can be indicated by a notation at the
    # beginning of the line or paragraph like "Alister:".  Note
    # if this is the case, or undef $speaker if we're at a blank
    # line (in between paragraphs)

    $speaker=$1 if (/^((\w|-)+):/);
    undef $speaker if (/^$/);
    $counter=0 if (/^$/);

    # Remove speaker indication now that we've processed it.
    s/^(\w+):\s*//;

    # Set text color for material in quotes according to speaker
    # Actual colors are defined above in the LaTeX preamble.

    while (/"/ and defined $speaker) {
	if ($counter % 2 == 0) {
	    my $speaker1 = $speaker;
	    if ($speaker =~ s/([^_]+)_(.*)/$2/) {
		$speaker1 = $1;
	    }
	    s|"|<font color='$textcolor{$speaker1}'>\xe2\x80\x9c|;
	} else {
	    s|"|\xe2\x80\x9d</font>|;
	}

	$counter ++;
    }

    while (/"/ and not /\\"/) {
	if ($counter % 2 == 0) {
	    s/"/\xe2\x80\x9c/;
	} else {
	    s/"/\xe2\x80\x9d/;
	}

	$counter ++;
    }

    s|_([-\w',!.?;]+)_|<em>\1</em>|g;	# convert bracketing _ to italics
    s/_/ /g;				# convert interior _ to spaces

    # Change '    ' in chapter title lines to hskip
    if (/^(T [+-] [0-9]+)/ || /^(Launch Day)/ || /^(Epilog)/) {
	print "<spacer/><p><a id='$1'/>\n";
	s/    /&nbsp;&nbsp;&nbsp;&nbsp;/;
	$line_number = 0;
    } elsif (! m|^$|) {
	$line_number ++;
    }

    if (s|^EJECT$||) {
	$line_number = 0;
    }

    # Put chapter titles on new pages in typewriter font
    #   the centerline is there to make T + 1 day overfill
    s|^T [+-] [0-9]+.*$|<tt>$&</tt>|;

    # Ditto for Launch Day
    s|^Launch Day+.*$|<tt>$&</tt>|;

    # Ditto for Epilog
    s|^Epilog+.*$|<tt>$&</tt>|;

    if (m|^{| && $line_number == 1) {
	print "<spacer/>\n";
    }

    # Format poetry - with italics {{ }}
    s|^{{([^}]*)}}$|<center><em>\1</em></center>|;

    # Format dedication at beginning - without italics {
    s|^{([^}]*)$|<center>\1</center>|;

    # Insert a math equation
    s|STOKES\.|\$\$\\int_{\\delta C} w = \\int_C dw\$\$|;

    s|^$|<p>|;

    # Indent quoted blocks
    if (/^   / and not $in_quoted_block) {
	print "<blockquote>\n";
	$in_quoted_block = 1;
    }
    if (not /^   / and not /^$/ and $in_quoted_block) {
	print "</blockquote>\n";
	$in_quoted_block = 0;
    }

    if (/Requirements for The Great anti-American Novel/) {
	&insertTOC;
    } else {
	print;
    }

    if (/^<tt>T [+-] [0-9]+/ || /^<tt>Launch Day/ || /^<tt>Epilog/) {
	print "<spacer/><p>\n";
    }
}

sub ProcessFile {
    my ($FILE) = @_;

    while (<$FILE>) {
	my $filename = $_;
	chomp $filename;

	if ($filename =~ m/^[-A-Z 0-9]*$/ and -r $filename) {
	    open(NESTED_FILE, "<$filename");
	    ProcessFile(\*NESTED_FILE);
	    close(NESTED_FILE);
	} else {
	    ProcessLine;
	}
    }
}

print q|
<!DOCTYPE html>
<HTML>

<HEAD>
<meta charset="utf-8">

<TITLE>IcarusWing</TITLE>

<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<style type="text/css">
spacer { display: block; height:100px; }
p.spacer10 { height:100px; }
</style>

</HEAD>
<BODY>

<p class="spacer10"/>

<center><h1>Icarus Wing</h1></center>

<spacer/>

<center>by Brent Baccala</center>

|;


ProcessFile(\*STDIN);

print q|
<spacer/>
</BODY></HTML>
|;
